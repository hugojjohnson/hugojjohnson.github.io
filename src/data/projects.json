[
    {
        "url": "hugojjohnson",
        "title": "hugojjohnson.github.io",
        "blurb": "My website!",
        "cover": "/projects/hugojjohnson.png",
        "githubLink": "https://github.com/hugojjohnson/hugojjohnson.github.io",
        "tags": [
            "Python",
            "NodeJs",
            "React",
            "Tailwind"
        ],
        "blog": "# Project Demo\n<a target=\"_blank\" href=\"https://hugojjohnson.github.io/?recursion\">Check it out!</a>\n\n# Summary\nEveryone needs a personal website: It's what puts you into the world, promotes you, and shows everyone what you're passionate about. For programmers especially, it's practically a no-brainer. For this reason, this website was one of the first ones that I made, but over time I've gradually added to it as I learned new skills.\n\n<br />\n\nI decided to put some of my projects up here so that a) you (the reader 🙃) can see what I've been working on, and b) so that I have some record of all the cool things I've made and when. I plan on adding new awesome things, so if you're not as pumped as I am, check back in a couple of months :)\n\n# What I learned\n## KISS\nI always wanted to put on display the projects that I've been working on in my website. Originally, I was going to make a Rest API backend which would host a database of all the projects I've ever worked on, write some sort of keyword search engine for searching through them, and connect *that* to a GPT-powered recommendation algorithm-type-thing. It definitely would have displayed my skills. But it also would have been less reliable, more expensive, and more difficult to maintain.\n\n<br />\n\nInstead, this website is built solely in React, with each project post hard-coded into it. Whenever I add a project, I just edit the website and re-deploy it. And that's mean I had more time to work on other, more interesting projects (like <a target=\"_blank\" href=\"https://hugojjohnson.github.io/workaholic\">this one</a>).\n\n\n"
    },
    {
        "url": "workaholic",
        "title": "Workaholic",
        "blurb": "My study timer.",
        "cover": "/projects/workaholic.png",
        "githubLink": "https://github.com/hugojjohnson/workaholic",
        "tags": [
            "Python",
            "NodeJs",
            "React",
            "Tailwind"
        ],
        "blog": "# Project Demo\n<a target=\"_blank\" href=\"https://hugojjohnson.github.io/workaholic\">Check it out!</a>\n\n# Summary\nI might be biased, but my study timer, Workaholic, is one of my favourite websites on the internet. It's simple, easy to use, and does exactly what I designed it to do. Workaholic tracks the time, duration and type of study that you do, and lets you analyse trends in your study over time over a period of time. It uses Chart.js to display some important metrics about your habits, letting you learn more about both the amount and quality of study that you put in. \n\n<br />\n\nI developed a first draft of the website at the start of 2024 when I made it my goal to track my study over a semester. During that time, I tracked *every minute* of study that I put in. It was a pain at the start, but as I started automating everything it got much easier. What's more, at the end of the semester, I found some really interesting facts that surprised me:\n\n<ol style=\"list-style-type: decimal; list-style-position: inside; margin-top: 15px; margin-bottom: 15px;\">\n<li>\nEven though I thought I was, I was not consistent. At all. I'd put in a full day of study, doubling my goals, then do nothing at all the next day. I had fluctuations of long periods of time studying, followed by a self-imposed haitus. Weirdest of all, I thought I was pretty consistent most days!\n</li>\n\n<br />\n\n<li>\nI actually spent almost equal amounts of time on each of my subjects, with a 30-40-30 split... It did not feel like that. I thought I was avoiding subjects for long periods and that I should have given them more time.\n</li>\n\n<br />\n\n<li>\nI was much more effective at studying for some subjects than others. It turns out I'm more effective at studying problem solving-based subjects rather than content-based ones. Who would have guessed?\n</li>\n</ol>\n\nOverall, it's been so interesting seeing where my study time actually goes, and how I can maybe make some more informed choices in the future. Hopefully it will lead to a more informed and effective routine, that leaves me more time to do the things that I love.\n\n<br />\n\nI have recently added user accounts, so I can share it with my friends, and sockets, so you can have multiple devices logged in and synced at the same time. Feel free to try it out!\n\n# What I learned\n## Changing to TypeScript\nThis is the first project that I have had to convert from JavaScript to TypeScript, and it created a *lot* or re-organising. My website structure, which seemed pretty logical to me at the start, turned out to be exactly not what I wanted if I ever wanted to add any new features. Every time I changed something, it broke another completely unrelated part of the website. Talk about bad programming practice!\n\n## Fix your code before you change it\nI decided that I had to fix my website before I could add anything new to it. This involved not only re-defining how I would save my user data, but also considering what values my data could take. For example, if the user is signed in, is there any data that I am guaranteed to be able to use? If so, why am I treating everything like an optional?\n\n## Using Git (properly)\nOnce I fixed the structure of my (badly written) website, I committed my changes to git. I felt relieved that no matter what changes I made in the future, I could do so knowing I could go back to a working version of the website without any trouble. This is the first time that I experienced firsthand the benefits of using Git as a checkpointing tool, rather than just a way to more efficiently store my files with GitHub.\n\n## Custom hooks\nLastly, I stared using custom hooks in React, as a necessity. I experimented with them earlier on in my React career, but I couldn't find a good use for them. It's interesting seeing how working on a concrete project provides opportunities for different techniques that you don't experience in shorter exercises.\n\n# Local setup\nTo set up and run this project locally, the GitHub repo can be found [here](https://github.com/hugojjohnson/workaholic) and [here](https://github.com/hugojjohnson/workaholic-backend).\n\n1. Download or clone the repo onto your local machine\n\n2. Install [NodeJS](https://nodejs.org/en/download/package-manager)\n\n3. Set up a [MongoDB Atlas](https://www.mongodb.com/products/platform/atlas-database) and save the login credentials in `.env`.\n\n\n\n\n"
    },
    {
        "url": "proyecto",
        "title": "Proyecto",
        "blurb": "Be mindful of your time.",
        "cover": "/projects/proyecto.png",
        "githubLink": "https://github.com/hugojjohnson/proyecto",
        "tags": [
            "Python",
            "NodeJs",
            "React",
            "Tailwind"
        ],
        "blog": "# Project Demo\n<a target=\"_blank\" href=\"https://hugojjohnson.github.io/proyecto\">Check it out!</a>\n\n# Summary\nWith a few of the projects I have been working on so far, I have noticed that JavaScript just doesn't have enough structure. I spent more hours than I want to admit trying to fix silly mistakes that I wouldn't make in a statically typed language like Java.\n\nFor the backend, I tried using Python - specifically FastAPI and Beanie. I found the development process about as hard as I was expecting. While I appreciate having done it, I plan on sticking to TypeScript for the backend in the future.\n\nProyecto is designed to help you be more mindful of your time. By establishing clear projects and goals, you can ensure that any progress you make towards a project that you are working on contributes to your overall aims. Feel free to try it out!\n\n# Tools\nThis app was developed with `Vite` using `TypeScript` and `FastAPI`, and is hosted with GitHub Pages and Heroku. A `MongoDB` database hosted on Atlas was connected to with the `Beanie` library.\n\n# What I learned\n## Types, types!\nWhat I expected from static typing was an increase in development speed - I wouldn't have to worry about accessing a field that doesn't exist, or forget to convert a string to an integer. What I wasn't expecting was how early on in the project I had to define my data types. Originally, my development process went as follows:\n\n<ol style=\"list-style-type: decimal; list-style-position: inside; margin-top: 15px; margin-bottom: 15px;\">\n<li>Create a user object with the bare minimum features.</li>\n<li>Realise I forgot to include a username.</li>\n<li>Search my \\*entire\\* application for any mention of user, and make sure it handles the username properly.</li>\n<li>Repeat steps 2-3 until running out of energy.</li>\n\n</ol>\n\nNow, with static typing:\n<ol style=\"list-style-type: decimal; list-style-position: inside; margin-top: 15px; margin-bottom: 15px;\">\n<li>Define the `user` interface</li>\n<li>Implement the interface every time I need to change the user.</li>\n</ol>\n\nWhile I was programming, this was a pain: code that I *knew* would work threw errors, and I had to think much more about exactly what my data types would look like. However towards the end of the project, I was grateful that I had such clear data structures.\n\n## Consitent colour\nI picked a pink-to-indigo gradient very early on in the project, and tried to stick with it as I was developing the front end. I standardised input fields and definitely plan on making my own component library at some point.\n\n# Local setup\nTo set up and run this project locally, the GitHub repo can be found [here](https://github.com/hugojjohnson/proyecto) and [here](https://github.com/hugojjohnson/proyecto-backend).\n\n1. Download or clone the repo onto your local machine\n\n2. Install [NodeJS](https://nodejs.org/en/download/package-manager)\n\n3. Set up a [MongoDB Atlas](https://www.mongodb.com/products/platform/atlas-database) and save the login credentials in `.env`.\n\n\n\n\n"
    },
    {
        "url": "watersort-puzzle-solver",
        "title": "Watersort Puzzle Solver",
        "blurb": "Never get stuck again",
        "cover": "/projects/watersort.png",
        "githubLink": "https://github.com/hugojjohnson/watersort-solver",
        "tags": ["Python", "NodeJs", "React", "Tailwind"],
        "blog": "\n```javascript\nlet x = 2;\nx += 1;\nlet x = 2;\nlet x = 2;\n```\n\n# Summary\nWater Sort is a popular mobile game. You can play it online [here](https: //www.safekidgames.com/water-sort/).\nThis program was designed to, after giving the colours and positions for each vial, give the correct series of steps to\nsolve the level. It is especially useful when the puzzle has above ten vials, as it can sometimes become difficult to\nsolve otherwise.\n\n\n# Tools\nThis app was developed with `NodeJS` and `React`. It was bootstrapped with Create React App and uses Tailwind for styles.\nThe solving algorithm was originally written in Python and copied across to Javascript.\n\n# Local setup\nTo set up and run this project locally, there are two options:\n1. The python script is attached. Open 'main.py', replace the variable 'example_board' with an array of the board, and\nrun the script.\n\n2. A web version (demonstration found [here](https://hugojjohnson.github.io/watersort-solver/)) was developed with\nNodeJS.\n\n\n\n\n\n"
    },
    {
        "url": "linear-regression-library",
        "title": "My linear regression library",
        "blurb": "Like TensorFlow, but better.",
        "cover": "/projects/linear-regression.png",
        "githubLink": "https://github.com",
        "tags": ["Python", "ML"],
        "blog": "Here is my implementation of a linear regression algorithm."
    },
    {
        "url": "invoicing-system",
        "title": "My tutoring invoicing system",
        "blurb": "Make professional invoices, automatically, for free.",
        "cover": "/projects/tutoring-invoice.png",
        "githubLink": "https://github.com",
        "tags": [
            "Python",
            "ML"
        ],
        "blog": "\n# Project Demo\n<a target=\"_blank\" href=\"https://hugojjohnson.github.io/invoice-system-demo/\">Check it out!</a>\n\n# Summary\nSince 2021, I have been tutoring primary and high school subjects in Physics, Chemistry, and Mathematics. I eventually needed to begin sending my clients invoices at regular intervals with a receipt of my services, including the date, duration and how much I have charged them. This web app was designed to automate the process of recording lessons and sending invoices.\n\n# Tools\nThis app was developed with `NodeJS`, `React`, `Tailwind CSS` and is hosted on a Heroku server.\nLike many of my other projects, this project was originally implemented in Python with a command line interface, before being redesigned to work on the web.\n\n## What I learned\n### JSON Schema\nI wanted a way to easily validate the data I passed to my server so that I could verify that each key entry was included. At first I considered writing validation software myself, however I hoped that someone had already done this before. And I'm glad I did - the extensive documentation of JSON Schema and the amount of validators already available was plenty. \n\n### Heroku Buildpacks\nThe local version of the app includes the ability to generate a PDF invoice that is ready to be sent out - however, when I deployed the app to Heroku, this functionality no longer worked because pdflatex was not installed. I discovered that I could use buildpacks - Heroku's package manager - to load the software I needed. While I haven't made this work yet, I'm on my way to understanding how I can upload my own buildpacks to my server.\n\n### Code reusability\nAt many stages in this project I realised that I had already designed something very similar before, which let me reuse existing features either through inheritance or by abstracting it into a function.\n\n# Local setup\nTo set up and run this project locally, the Github repo can be found [here](https://github.com/hugojjohnson/invoice-system-demo).\n\n1. Download or clone the repo onto your local machine\n\n2. In one terminal, type `cd backend; npm install; npm run start` to install the backend dependencies and start the server.\n\n3. In a different terminal, type `cd frontend; npm install; npm run start` to install the frontend dependencies and start the front end server.\n\n(Note that this requires having [NodeJS](https://nodejs.org/en) installed.)\n\n\n\n\n"
    },
    {
        "url": "exercise-logger-app",
        "title": "Exercise Logger Mobile App",
        "blurb": "Transferring skills to over platforms",
        "cover": "/projects/pushups.png",
        "githubLink": "https://github.com/hugojjohnson/exercise-logger-app",
        "tags": [
            "Github",
            "React",
            "Tailwind"
        ],
        "blog": "\n# Project Demo\nUnfortunately, this app only works on mobile devices. The app can be demoed by downloading the Expo Go app on the App Store or Google Play Store - for more information, please see the [GitHub](https://github.com/hugojjohnson/exercise-logger-app).\n\n# Summary\nMobile Apps are used everywhere. From Instagram to Crossy Road, these apps are used by everyone, all the time, often non-stop... I just had to learn how to make one! Fortunately, I had already learned the basics of React, and so React Native seemed right down my alley. I thought I would make an app to encourage myself to exercise more, and so I set about making 'the Duolingo of Exercise' 😁.\n\n# Tools\nThis app was developed with `Expo`, `React Native` and `NativeWind`, and is hosted with Expo on Expo Go. The [expo-secure-store](https://docs.expo.dev/versions/latest/sdk/securestore/), [expo-status-bar](https://docs.expo.dev/versions/latest/sdk/status-bar/) and [community datetimepicker](https://docs.expo.dev/versions/latest/sdk/date-time-picker/) libraries, among others, were also used.\n\n# What I learned\n## React Native\nA long, long time ago, before React Native, companies used to employ three teams of developers - a Web Dev team to develop the Website, an IOS team who would reproduce the product with Swift, and an Android team who would reproduce it with Kotlin. These teams of developers would struggle to work together to produce a coherent experience for the end user, sometimes effectively, sometimes not. Today, React Native lets programmers use the same skill set to write all three different types of applications. React Native's philosophy is that with enough APIs, any app can be generalised across platforms. I have definitely found that to be the case - the huge amount of open-source libraries available has been instrumental in cutting down the time developing features that I would otherwise spend a *veeery* long time Googling for.\n\n# Local setup\nTo set up and run this project locally, the GitHub repo can be found [here](https://github.com/hugojjohnson/exercise-logger-app).\n\n1. Download or clone the repo onto your local machine\n\n2. Install [React Native](https://reactnative.dev/)\n\n3. Follow the instructions to download `Expo Go`.\n\n4. Type `npm expo start` and you're all set!\n\n\n\n\n"
    }
]