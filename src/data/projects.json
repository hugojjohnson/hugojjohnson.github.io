[
    {
        "url": "watersort-puzzle-solver",
        "title": "Watersort Puzzle Solver",
        "blurb": "Never get stuck again",
        "cover": "/projects/watersort.png",
        "githubLink": "https://github.com/hugojjohnson/watersort-solver",
        "tags": ["Python", "NodeJs", "React", "Tailwind"],
        "blog": "\n```javascript\nlet x = 2;\nx += 1;\nlet x = 2;\nlet x = 2;\n```\n\n# Summary\nWater Sort is a popular mobile game. You can play it online [here](https: //www.safekidgames.com/water-sort/).\nThis program was designed to, after giving the colours and positions for each vial, give the correct series of steps to\nsolve the level. It is especially useful when the puzzle has above ten vials, as it can sometimes become difficult to\nsolve otherwise.\n\n\n# Tools\nThis app was developed with `NodeJS` and `React`. It was bootstrapped with Create React App and uses Tailwind for styles.\nThe solving algorithm was originally written in Python and copied across to Javascript.\n\n# Local setup\nTo set up and run this project locally, there are two options:\n1. The python script is attached. Open 'main.py', replace the variable 'example_board' with an array of the board, and\nrun the script.\n\n2. A web version (demonstration found [here](https://hugojjohnson.github.io/watersort-solver/)) was developed with\nNodeJS.\n\n\n\n\n\n"
    },
    {
        "url": "linear-regression-library",
        "title": "My linear regression library",
        "blurb": "Like TensorFlow, but better.",
        "cover": "/projects/linear-regression.png",
        "githubLink": "https://github.com",
        "tags": ["Python", "ML"],
        "blog": "Here is my implementation of a linear regression algorithm."
    },
    {
        "url": "invoicing-system",
        "title": "My tutoring invoicing system",
        "blurb": "Make professional invoices, automatically, for free.",
        "cover": "/projects/tutoring-invoice.png",
        "githubLink": "https://github.com",
        "tags": [
            "Python",
            "ML"
        ],
        "blog": "\n# Project Demo\n[Check it out!](https://hugojjohnson.github.io/invoice-system-demo/)\n\n# Summary\nSince 2021, I have been tutoring primary and high school subjects in Physics, Chemistry, and Mathematics. I eventually needed to begin sending my clients invoices at regular intervals with a receipt of my services, including the date, duration and how much I have charged them. This web app was designed to automate the process of recording lessons and sending invoices.\n\n# Tools\nThis app was developed with `NodeJS`, `React`, `Tailwind CSS` and is hosted on a Heroku server.\nLike many of my other projects, this project was originally implemented in Python with a command line interface, before being redesigned to work on the web.\n\n## What I learned\n### JSON Schema\nI wanted a way to easily validate the data I passed to my server so that I could verify that each key entry was included. At first I considered writing validation software myself, however I hoped that someone had already done this before. And I'm glad I did - the extensive documentation of JSON Schema and the amount of validators already available was plenty. \n\n### Heroku Buildpacks\nThe local version of the app includes the ability to generate a PDF invoice that is ready to be sent out - however, when I deployed the app to Heroku, this functionality no longer worked because pdflatex was not installed. I discovered that I could use buildpacks - Heroku's package manager - to load the software I needed. While I haven't made this work yet, I'm on my way to understanding how I can upload my own buildpacks to my server.\n\n### Code reusability\nAt many stages in this project I realised that I had already designed something very similar before, which let me reuse existing features either through inheritance or by abstracting it into a function.\n\n# Local setup\nTo set up and run this project locally, the Github repo can be found [here](https://github.com/hugojjohnson/invoice-system-demo).\n\n1. Download or clone the repo onto your local machine\n\n2. In one terminal, type `cd backend; npm install; npm run start` to install the backend dependencies and start the server.\n\n3. In a different terminal, type `cd frontend; npm install; npm run start` to install the frontend dependencies and start the front end server.\n\n(Note that this requires having [NodeJS](https://nodejs.org/en) installed.)\n\n\n\n\n"
    },
    {
        "url": "exercise-logger-app",
        "title": "Exercise Logger Mobile App",
        "blurb": "Transferring skills to over platforms",
        "cover": "/projects/pushups.png",
        "githubLink": "https://github.com/hugojjohnson/exercise-logger-app",
        "tags": [
            "Github",
            "React",
            "Tailwind"
        ],
        "blog": "\n# Project Demo\nUnfortunately, this app only works on mobile devices. The app can be demoed by downloading the Expo Go app on the App Store or Google Play Store - for more information, please see the [GitHub](https://github.com/hugojjohnson/exercise-logger-app).\n\n# Summary\nMobile Apps are used everywhere. From Instagram to Crossy Road, these apps are used by everyone, all the time, often non-stop... I just had to learn how to make one! Fortunately, I had already learned the basics of React, and so React Native seemed right down my alley. I thought I would make an app to encourage myself to exercise more, and so I set about making 'the Duolingo of Exercise' üòÅ.\n\n# Tools\nThis app was developed with `Expo`, `React Native` and `NativeWind`, and is hosted with Expo on Expo Go. The [expo-secure-store](https://docs.expo.dev/versions/latest/sdk/securestore/), [expo-status-bar](https://docs.expo.dev/versions/latest/sdk/status-bar/) and [community datetimepicker](https://docs.expo.dev/versions/latest/sdk/date-time-picker/) libraries, among others, were also used.\n\n# What I learned\n## React Native\nA long, long time ago, before React Native, companies used to employ three teams of developers - a Web Dev team to develop the Website, an IOS team who would reproduce the product with Swift, and an Android team who would reproduce it with Kotlin. These teams of developers would struggle to work together to produce a coherent experience for the end user, sometimes effectively, sometimes not. Today, React Native lets programmers use the same skill set to write all three different types of applications. React Native's philosophy is that with enough APIs, any app can be generalised across platforms. I have definitely found that to be the case - the huge amount of open-source libraries available has been instrumental in cutting down the time developing features that I would otherwise spend a *veeery* long time Googling for.\n\n# Local setup\nTo set up and run this project locally, the GitHub repo can be found [here](https://github.com/hugojjohnson/exercise-logger-app).\n\n1. Download or clone the repo onto your local machine\n\n2. Install [React Native](https://reactnative.dev/)\n\n3. Follow the instructions to download `Expo Go`.\n\n4. Type `npm expo start` and you're all set!\n\n\n\n\n"
    }
]